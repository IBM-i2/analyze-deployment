#!/bin/bash
# MIT License
#
# Copyright (c) 2022, N. Harris Computer Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#####################################################################################
#                                                                                   #
#  Script to create containers from previously created images and start them.       #
#                                                                                   #
#  Usage : runContainers                                                            #
#                                                                                   #
#####################################################################################

set -e

. utils/variables

pushd ..

. ${UTILS_PATH}/functions

output "Cleaning up any previously created deployment example containers if they exist."
docker rm -f zookeeper zookeeper2 zookeeper3 solr solr2 sqlserver db2 admin_client liberty etl_client ihs connector &>/dev/null || true

output "Clean up the previously created deployment example network if it exists."
docker network rm eianet &>/dev/null || true

output "Creating the (eianet) deployment example network."
docker network create eianet

output "Running the zookeeper, zookeeper2 and zookeeper3 containers on the eia network."
docker run -d --name zookeeper --net eianet --memory=512m -u i2analyze zookeeper_image
docker run -d --name zookeeper2 --net eianet --memory=512m -u i2analyze zookeeper2_image
docker run -d --name zookeeper3 --net eianet --memory=512m -u i2analyze zookeeper3_image

output "Waiting to ensure that the ZooKeeper servers are running."
waitForContainer zookeeper '\.Started' '\.Not Started'
waitForContainer zookeeper2 '\.Started' '\.Not Started'
waitForContainer zookeeper3 '\.Started' '\.Not Started'

output "Running the admin_client container to create and upload solr configuration"
docker run -d --name admin_client --net eianet --memory=1g -u i2analyze admin_client_sqlserver_image
waitForContainer admin_client 'Started'
docker exec -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createAndUploadSolrConfig --hostname admin_client.eianet

output "Running the solr and solr2 containers on the eia network."
docker run -d --name solr -p 8983:8983 --net eianet --memory=1g -u i2analyze solr_image
docker run -d --name solr2 -p 8984:8984 --net eianet --memory=1g -u i2analyze solr2_image

output "Waiting to ensure that the Solr servers are running and create the Solr collection on the eia network."
waitForContainer solr ': Started' 'not started'
waitForContainer solr2 ': Started' 'not started'
docker exec -t -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createSolrCollections --hostname admin_client.eianet

output "Running the sqlserver container on the eia network."
echo -n "Enter a password for the SA account: "
read -s saPassword
docker run -d -u root -e 'ACCEPT_EULA=Y' -e "SA_PASSWORD=${saPassword}" --memory=3.5g --name sqlserver -p 1433:1433 --net eianet sqlserver_image

output "Waiting to ensure that the Microsoft SQL Server is running"
waitForContainer sqlserver "Service Broker manager has started"

output "Enter the password that you specified for db.infostore.password in the credentials.properties file:"
read -s password
docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -U SA -P ${saPassword} -Q "CREATE LOGIN i2analyze WITH PASSWORD = '${password}'; CREATE USER i2analyze FOR LOGIN i2analyze; ALTER SERVER ROLE sysadmin ADD MEMBER i2analyze"

output "Running the admin_client container to create the database"
docker exec -t -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createDatabases

if [ "$(docker images -q ihs_image)" ]; then
  output "Running the ihs container on the eia network"
  docker run -d --name ihs -h ihs -p 80:80 -p 443:443 --memory=512m --net eianet -u root ihs_image
fi

output "Running the liberty container on the eia network"
docker run -d --name liberty -p 9082:9082 -p 9445:9445 --net eianet --memory=2g -u i2analyze liberty_sqlserver_image

waitForContainer liberty 'Application started'

output "Running the etl client on the eia network"
docker run -d --name etl_client --net eianet --memory=512m -u i2analyze etl_client_sqlserver_image

output "Running the connector on the eia network"
docker run -d --name connector --net eianet --memory=512m -u i2analyze connector_image

popd
