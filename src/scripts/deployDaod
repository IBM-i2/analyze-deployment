#!/bin/bash
# MIT License
#
# Copyright (c) 2022, N. Harris Computer Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#####################################################################################
#                                                                                   #
#  Script to set up i2 Connect for use with i2 Analyze.                             #
#                                                                                   #
#  Usage : deployDaod [<configModsName>] [<dbDialect>]                              #
#  Defaults to i2connect configuration directory                                    #
#  Defaults to current database dialect                                             #
#                                                                                   #
#####################################################################################

set -e

. utils/variables

pushd ..

. ${UTILS_PATH}/functions

configModsName=${1:-i2connect}

if [[ $configModsName != "i2connect" &&  $configModsName != "i2connect_istore" ]]; then
    echo "Error: Invalid configuration. Please provide an i2Connect configuration name."
    exit 1
fi

dbDialect=${2:-${DB_DIALECT}}
if [[ $dbDialect != "sqlserver" &&  $dbDialect != "db2" ]]; then
    echo "Error: Unrecognized dialect."
    exit 1
fi

pushd ${SCRIPTS_PATH}
. updateServerConfigurations ${configModsName} ${dbDialect}
popd

output "Stopping Liberty"
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t stopLiberty

output "Deploying Liberty"
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t deployLiberty

output "Updating the Solr configuration on the ZooKeeper servers"
docker exec -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createAndUploadSolrConfig --hostname admin_client.eianet

output "Creating Solr collections"
docker exec -t -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createSolrCollections --hostname admin_client.eianet

output "Copying security configuration and restarting the connector container"
docker cp ${IMAGES_PATH}/common/connector/security-config.json connector:/opt/IBM/i2analyze/example_connector/security-config.json
# After the connector container is restarted, the example connector starts with the SSL configuration
docker restart connector

output "Starting Liberty"
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t startLiberty

popd
