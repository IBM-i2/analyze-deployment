#!/bin/bash
# MIT License
#
# Copyright (c) 2022, N. Harris Computer Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#####################################################################################
#                                                                                   #
#  Script to create key stores, trust stores, and certificate signing requests.     #
#                                                                                   #
#  This script is called as part of the createKeysAndStores script.                 #
#                                                                                   #
#####################################################################################

. ${UTILS_PATH}/variables
. ${UTILS_PATH}/functions

dbDialect=${1:-${DB_DIALECT}}

output "Removing any previous keys, if they exist"
rm -rf ${SRC_DIR}/keys
mkdir -p ${SRC_DIR}/keys/requests
mkdir -p ${SRC_DIR}/keys/stores

output "Adding the CA certificate to containers"
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer liberty:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer solr:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer solr2:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer zookeeper:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer zookeeper2:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer zookeeper3:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer connector:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer $dbDialect:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer admin_client:/opt/IBM/utils/keys/CA.cer
docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer etl_client:/opt/IBM/utils/keys/CA.cer

if [ "$(docker ps -q -f name=ihs)" ]; then
  docker cp ${IMAGES_PATH}/common/ca/ca/CA.cer ihs:/opt/IBM/utils/keys/CA.cer
fi

output "Creating the liberty container key store and certificate signing request"
docker exec -u root -t liberty rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword liberty "/opt/IBM/utils/jks/createCSR liberty jks"

output "Creating 'Jenny' user key store and certificate signing request"
runDockerExecWithSSLPassword liberty "/opt/IBM/utils/jks/createCSR Jenny Jenny Jenny"

output "Creating 'Imogen' user key store and certificate signing request"
runDockerExecWithSSLPassword liberty "/opt/IBM/utils/jks/createCSR Imogen Imogen Imogen"

#Copy the liberty and users certificates signing requests to the local machine
docker cp liberty:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the solr container key store and certificate signing request"
docker exec -u root -t solr rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword solr "/opt/IBM/utils/jks/createCSR solr"
docker cp solr:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the solr2 container key store and certificate signing request"
docker exec -u root -t solr2 rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword solr2 "/opt/IBM/utils/jks/createCSR solr2"
docker cp solr2:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the zookeeper container key store and certificate signing request"
docker exec -u root -t zookeeper rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword zookeeper "/opt/IBM/utils/jks/createCSR zookeeper"
docker cp zookeeper:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the zookeeper2 container key store and certificate signing request"
docker exec -u root -t zookeeper2 rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword zookeeper2 "/opt/IBM/utils/jks/createCSR zookeeper2"
docker cp zookeeper2:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the zookeeper3 container key store and certificate signing request"
docker exec -u root -t zookeeper3 rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword zookeeper3 "/opt/IBM/utils/jks/createCSR zookeeper3"
docker cp zookeeper3:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

if [[ $dbDialect == "db2" ]]; then
	output "Creating the db2 container key store and certificate signing request"
	docker exec -u root -t db2 rm -rf /opt/IBM/keys
	runDockerExecWithSSLPassword db2 "/opt/IBM/utils/cms/createCSR db2"
	docker cp db2:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests
	runDockerExecWithSSLPassword db2 "/opt/IBM/utils/cms/createTrustStore cms"
elif [[ $dbDialect == "sqlserver" ]]; then
	output "Creating the sqlserver container key store and certificate signing request"
	docker exec -u root -t sqlserver rm -rf /opt/IBM/keys
	runDockerExecWithSSLPassword sqlserver "/opt/IBM/utils/openssl/createCSR sqlserver"
	docker cp sqlserver:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests
fi

if [ "$(docker ps -q -f name=ihs)" ]; then
  output "Creating the ihs container key store and certificate signing request"
  docker exec -u root -t ihs rm -rf /opt/IBM/keys
  runDockerExecWithSSLPassword ihs "/opt/IBM/utils/cms/createCSR ihs"
  docker cp ihs:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests
  runDockerExecWithSSLPassword ihs "/opt/IBM/utils/cms/createTrustStore cms"
fi

output "Creating the admin_client container key store and certificate signing request"
docker exec -u root -t admin_client rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword admin_client "/opt/IBM/utils/jks/createCSR admin_client jks"
docker cp admin_client:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Creating the admin_client container trust stores"
runDockerExecWithSSLPassword admin_client "/opt/IBM/utils/jks/createTrustStore admin_client"
if [[ $dbDialect == "db2" ]]; then
	runDockerExecWithSSLPassword admin_client "/opt/IBM/utils/cms/createTrustStore db2"
fi

output "Creating the etl_client container trust store"
docker exec -u root -t etl_client rm -rf /opt/IBM/keys
docker exec -u root -t etl_client mkdir -p /opt/IBM/keys/stores
if [[ $dbDialect == "db2" ]]; then
	runDockerExecWithSSLPassword etl_client "/opt/IBM/utils/cms/createTrustStore db2"
fi

output "Creating i2 Connect connector key store and certificate signing request"
docker exec -u root -t connector rm -rf /opt/IBM/keys
runDockerExecWithSSLPassword connector "/opt/IBM/utils/openssl/createCSR connector"
docker cp connector:/opt/IBM/keys/requests/. ${SRC_DIR}/keys/requests

output "Copy the common trust store to each container"
docker cp admin_client:/opt/IBM/keys/stores/i2-jks-truststore.jks ${SRC_DIR}/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks liberty:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks solr:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks solr2:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks zookeeper:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks zookeeper2:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks zookeeper3:/opt/IBM/keys/stores/i2-jks-truststore.jks
docker cp ${SRC_DIR}/keys/stores/i2-jks-truststore.jks etl_client:/opt/IBM/keys/stores/i2-jks-truststore.jks

#Change the file ownership of the copied files
docker exec -u root liberty chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root solr chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root solr2 chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root zookeeper chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root zookeeper2 chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root zookeeper3 chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
docker exec -u root etl_client chown root:keys /opt/IBM/keys/stores/i2-jks-truststore.jks
