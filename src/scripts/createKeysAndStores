#!/bin/bash
# MIT License
#
# Copyright (c) 2022, N. Harris Computer Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#####################################################################################
#                                                                                   #
#  Script to create the stores, private keys, and certificates for a                #
#  secure deployment. The stores are populated with signed certificate.             #
#                                                                                   #
#  Usage : createKeysAndStores [<dbDialect>]                                        #
#  Defaults to current database dialect                                             #
#                                                                                   #
#####################################################################################

. utils/variables

pushd ..

. ${UTILS_PATH}/functions

dbDialect=${1:-${DB_DIALECT}}

output "Removing the certificate authority container, if it exists"
docker rm -f ca &>/dev/null || true

output "Removing any previous keys, if they exist"
rm -rf ${SRC_DIR}/keys &>/dev/null || true

output "Building the ca_image"
docker build -t ca_image ${IMAGES_PATH}/common/ca

output "Running the certificate authority container"
docker run -d --name ca ca_image

output "Enter the SSL password"
read -s -p "Password: " SSL_PASSWORD
while [[ ${#SSL_PASSWORD} -lt 6 ]]
do
  echo "Length of password must be at least 6 characters long. Try again..."
  read -s -p "Password: " SSL_PASSWORD
done

header "Creating and signing the keys and certificates"
. ${SSL_SCRIPTS_PATH}/createSigningRequests $dbDialect $SSL_PASSWORD
. ${SSL_SCRIPTS_PATH}/signRequests $dbDialect $SSL_PASSWORD
. ${SSL_SCRIPTS_PATH}/applyResponses $dbDialect $SSL_PASSWORD

popd
